import json

# The input string (replace this with your actual string)
input_string = """
```json
{
  "project_root": {
    "app": {
      "api": {
        "routes": {
          "dashboard.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.dashboard import DashboardTile\nfrom app.services.dashboard_service import get_dashboard_tiles\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.get('/tiles', response_model=List[DashboardTile])\ndef get_dashboard_tiles_route(db: Session = Depends(get_db)):\n    return get_dashboard_tiles(db)\n",
          "lms.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.lms import LeaveRequest, LeaveStatus\nfrom app.services.lms_service import apply_leave, get_leave_status, approve_leave\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.post('/leaves/apply', response_model=LeaveRequest)\ndef apply_leave_route(leave_request: LeaveRequest, db: Session = Depends(get_db)):\n    return apply_leave(db, leave_request)\n\n@router.get('/leaves/status', response_model=List[LeaveRequest])\ndef get_leave_status_route(db: Session = Depends(get_db)):\n    return get_leave_status(db)\n\n@router.patch('/leaves/{leave_id}/approve', response_model=LeaveStatus)\ndef approve_leave_route(leave_id: int, status: LeaveStatus, db: Session = Depends(get_db)):\n    return approve_leave(db, leave_id, status)\n",
          "pods.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.pods import Pod, PodMember, Recommendation\nfrom app.services.pods_service import get_pod_details, recommend_employee\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.get('/{pod_id}/details', response_model=Pod)\ndef get_pod_details_route(pod_id: int, db: Session = Depends(get_db)):\n    return get_pod_details(db, pod_id)\n\n@router.post('/{pod_id}/recommend', response_model=Recommendation)\ndef recommend_employee_route(pod_id: int, recommendation: Recommendation, db: Session = Depends(get_db)):\n    return recommend_employee(db, pod_id, recommendation)\n",
          "auth.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.auth import User, UserLogin\nfrom app.services.auth_service import login_user, get_current_user\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.post('/login', response_model=User)\ndef login_route(user_login: UserLogin, db: Session = Depends(get_db)):\n    return login_user(db, user_login)\n\n@router.get('/user', response_model=User)\ndef get_current_user_route(current_user: User = Depends(get_current_user)):\n    return current_user\n",
          "__init__.py": ""
        },
        "models": {
          "dashboard.py": "from pydantic import BaseModel\nfrom typing import List\n\nclass DashboardTile(BaseModel):\n    id: int\n    title: str\n    content: str\n\nclass DashboardResponse(BaseModel):\n    tiles: List[DashboardTile]\n",
          "lms.py": "from pydantic import BaseModel\nfrom typing import List\nfrom datetime import date\n\nclass LeaveRequest(BaseModel):\n    start_date: date\n    end_date: date\n    reason: str\n\nclass LeaveStatus(BaseModel):\n    status: str\n\nclass LeaveResponse(BaseModel):\n    message: str\n    status: str\n",
          "pods.py": "from pydantic import BaseModel\nfrom typing import List\n\nclass PodMember(BaseModel):\n    id: int\n    name: str\n    role: str\n\nclass Pod(BaseModel):\n    pod_id: int\n    pod_name: str\n    members: List[PodMember]\n\nclass Recommendation(BaseModel):\n    recommended_user_id: int\n\nclass RecommendationResponse(BaseModel):\n    message: str\n",
          "auth.py": "from pydantic import BaseModel\n\nclass UserLogin(BaseModel):\n    email: str\n    password: str\n\nclass User(BaseModel):\n    id: int\n    name: str\n    role: str\n    token: str\n",
          "__init__.py": ""
        },
        "services": {
          "dashboard_service.py": "from sqlalchemy.orm import Session\nfrom app.models.dashboard import DashboardTile\n\ndef get_dashboard_tiles(db: Session):\n    return db.query(DashboardTile).all()\n",
          "lms_service.py": "from sqlalchemy.orm import Session\nfrom app.models.lms import LeaveRequest, LeaveStatus\n\ndef apply_leave(db: Session, leave_request: LeaveRequest):\n    new_leave = LeaveRequest(start_date=leave_request.start_date, end_date=leave_request.end_date, reason=leave_request.reason)\n    db.add(new_leave)\n    db.commit()\n    db.refresh(new_leave)\n    return new_leave\n\ndef get_leave_status(db: Session):\n    return db.query(LeaveRequest).all()\n\ndef approve_leave(db: Session, leave_id: int, status: LeaveStatus):\n    leave = db.query(LeaveRequest).filter(LeaveRequest.id == leave_id).first()\n    if leave:\n        leave.status = status.status\n        db.commit()\n        db.refresh(leave)\n    return leave\n",
          "pods_service.py": "from sqlalchemy.orm import Session\nfrom app.models.pods import Pod, PodMember, Recommendation\n\ndef get_pod_details(db: Session, pod_id: int):\n    return db.query(Pod).filter(Pod.pod_id == pod_id).first()\n\ndef recommend_employee(db: Session, pod_id: int, recommendation: Recommendation):\n    new_recommendation = Recommendation(pod_id=pod_id, recommended_user_id=recommendation.recommended_user_id)\n    db.add(new_recommendation)\n    db.commit()\n    db.refresh(new_recommendation)\n    return new_recommendation\n",
          "auth_service.py": "from sqlalchemy.orm import Session\nfrom app.models.auth import User, UserLogin\nfrom fastapi import HTTPException\nfrom passlib.context import CryptContext\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\ndef login_user(db: Session, user_login: UserLogin):\n    user = db.query(User).filter(User.email == user_login.email).first()\n    if not user or not pwd_context.verify(user_login.password, user.password):\n        raise HTTPException(status_code=401, detail='Invalid email or password')\n    token = create_access_token(data={'sub': user.email})\n    return {'token': token, 'user': user}\n\ndef get_current_user(db: Session, token: str):\n    credentials_exception = HTTPException(status_code=401, detail='Could not validate credentials')\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email = payload.get('sub')\n        if email is None:\n            raise credentials_exception\n        user = db.query(User).filter(User.email == email).first()\n        if user is None:\n            raise credentials_exception\n        return user\n    except JWTError:\n        raise credentials_exception\n",
          "__init__.py": ""
        },
        "database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nDATABASE_URL = 'postgresql://user:password@localhost/db'\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
        "main.py": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.api.routes.dashboard import router as dashboard_router\nfrom app.api.routes.lms import router as lms_router\nfrom app.api.routes.pods import router as pods_router\nfrom app.api.routes.auth import router as auth_router\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=['*'],\n    allow_headers=['*'],\n)\n\napp.include_router(dashboard_router, prefix='/api/dashboard', tags=['Dashboard'])\napp.include_router(lms_router, prefix='/api/lms', tags=['LMS'])\napp.include_router(pods_router, prefix='/api/pods', tags=['Pods'])\napp.include_router(auth_router, prefix='/api/auth', tags=['Auth'])\n"
      },
      "tests": {
        "test_dashboard.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_get_dashboard_tiles():\n    response = client.get('/api/dashboard/tiles', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'tiles' in response.json()\n",
        "test_lms.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_apply_leave():\n    response = client.post('/api/lms/leaves/apply', json={\n        'start_date': '2025-03-15',\n        'end_date': '2025-03-18',\n        'reason': 'Family event'\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['message'] == 'Leave request submitted successfully'\n\ndef test_get_leave_status():\n    response = client.get('/api/lms/leaves/status', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'status' in response.json()\n\ndef test_approve_leave():\n    response = client.patch('/api/lms/leaves/1/approve', json={\n        'status': 'approved'\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['status'] == 'approved'\n",
        "test_pods.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_get_pod_details():\n    response = client.get('/api/pods/1/details', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'pod_id' in response.json()\n\ndef test_recommend_employee():\n    response = client.post('/api/pods/1/recommend', json={\n        'recommended_user_id': 3\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['message'] == 'Recommendation sent successfully'\n",
        "test_auth.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_login():\n    response = client.post('/api/auth/login', json={\n        'email': 'user@example.com',\n        'password': 'securepassword'\n    })\n    assert response.status_code == 200\n    assert 'token' in response.json()\n\ndef test_get_current_user():\n    response = client.get('/api/auth/user', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'id' in response.json()\n",
        "__init__.py": ""
      },
      "Dockerfile": "FROM python:3.9-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]",
      "requirements.txt": "fastapi\nuvicorn\nsqlalchemy\npydantic\npasslib\npython-jose\npytest\n",
      ".env": "DATABASE_URL=postgresql://user:password@localhost/db\nSECRET_KEY=your_secret_key\nALGORITHM=HS256\n",
      "README.md": "# Dashboard Application\n\nThis is a centralized interface for employees and managers to access various features, including Leave Management System (LMS) and Pods.\n\n## Features\n- Leave Management System\n- Pods Management\n- Dashboard with real-time insights\n\n## Setup\n1. Install dependencies: `pip install -r requirements.txt`\n2. Run the application: `uvicorn app.main:app --reload`\n3. Access the API at `http://127.0.0.1:8000`\n"
    }
}
,
{
  "project_root": {
    "app": {
      "api": {
        "routes": {
          "dashboard.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.dashboard import DashboardTile\nfrom app.services.dashboard_service import get_dashboard_tiles\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.get('/tiles', response_model=List[DashboardTile])\ndef get_dashboard_tiles_route(db: Session = Depends(get_db)):\n    return get_dashboard_tiles(db)\n",
          "lms.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.lms import LeaveRequest, LeaveStatus\nfrom app.services.lms_service import apply_leave, get_leave_status, approve_leave\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.post('/leaves/apply', response_model=LeaveRequest)\ndef apply_leave_route(leave_request: LeaveRequest, db: Session = Depends(get_db)):\n    return apply_leave(db, leave_request)\n\n@router.get('/leaves/status', response_model=List[LeaveRequest])\ndef get_leave_status_route(db: Session = Depends(get_db)):\n    return get_leave_status(db)\n\n@router.patch('/leaves/{leave_id}/approve', response_model=LeaveStatus)\ndef approve_leave_route(leave_id: int, status: LeaveStatus, db: Session = Depends(get_db)):\n    return approve_leave(db, leave_id, status)\n",
          "pods.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.pods import Pod, PodMember, Recommendation\nfrom app.services.pods_service import get_pod_details, recommend_employee\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.get('/{pod_id}/details', response_model=Pod)\ndef get_pod_details_route(pod_id: int, db: Session = Depends(get_db)):\n    return get_pod_details(db, pod_id)\n\n@router.post('/{pod_id}/recommend', response_model=Recommendation)\ndef recommend_employee_route(pod_id: int, recommendation: Recommendation, db: Session = Depends(get_db)):\n    return recommend_employee(db, pod_id, recommendation)\n",
          "auth.py": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.models.auth import User, UserLogin\nfrom app.services.auth_service import login_user, get_current_user\nfrom app.database import get_db\n\nrouter = APIRouter()\n\n@router.post('/login', response_model=User)\ndef login_route(user_login: UserLogin, db: Session = Depends(get_db)):\n    return login_user(db, user_login)\n\n@router.get('/user', response_model=User)\ndef get_current_user_route(current_user: User = Depends(get_current_user)):\n    return current_user\n",
          "__init__.py": ""
        },
        "models": {
          "dashboard.py": "from pydantic import BaseModel\nfrom typing import List\n\nclass DashboardTile(BaseModel):\n    id: int\n    title: str\n    content: str\n\nclass DashboardResponse(BaseModel):\n    tiles: List[DashboardTile]\n",
          "lms.py": "from pydantic import BaseModel\nfrom typing import List\nfrom datetime import date\n\nclass LeaveRequest(BaseModel):\n    start_date: date\n    end_date: date\n    reason: str\n\nclass LeaveStatus(BaseModel):\n    status: str\n\nclass LeaveResponse(BaseModel):\n    message: str\n    status: str\n",
          "pods.py": "from pydantic import BaseModel\nfrom typing import List\n\nclass PodMember(BaseModel):\n    id: int\n    name: str\n    role: str\n\nclass Pod(BaseModel):\n    pod_id: int\n    pod_name: str\n    members: List[PodMember]\n\nclass Recommendation(BaseModel):\n    recommended_user_id: int\n\nclass RecommendationResponse(BaseModel):\n    message: str\n",
          "auth.py": "from pydantic import BaseModel\n\nclass UserLogin(BaseModel):\n    email: str\n    password: str\n\nclass User(BaseModel):\n    id: int\n    name: str\n    role: str\n    token: str\n",
          "__init__.py": ""
        },
        "services": {
          "dashboard_service.py": "from sqlalchemy.orm import Session\nfrom app.models.dashboard import DashboardTile\n\ndef get_dashboard_tiles(db: Session):\n    return db.query(DashboardTile).all()\n",
          "lms_service.py": "from sqlalchemy.orm import Session\nfrom app.models.lms import LeaveRequest, LeaveStatus\n\ndef apply_leave(db: Session, leave_request: LeaveRequest):\n    new_leave = LeaveRequest(start_date=leave_request.start_date, end_date=leave_request.end_date, reason=leave_request.reason)\n    db.add(new_leave)\n    db.commit()\n    db.refresh(new_leave)\n    return new_leave\n\ndef get_leave_status(db: Session):\n    return db.query(LeaveRequest).all()\n\ndef approve_leave(db: Session, leave_id: int, status: LeaveStatus):\n    leave = db.query(LeaveRequest).filter(LeaveRequest.id == leave_id).first()\n    if leave:\n        leave.status = status.status\n        db.commit()\n        db.refresh(leave)\n    return leave\n",
          "pods_service.py": "from sqlalchemy.orm import Session\nfrom app.models.pods import Pod, PodMember, Recommendation\n\ndef get_pod_details(db: Session, pod_id: int):\n    return db.query(Pod).filter(Pod.pod_id == pod_id).first()\n\ndef recommend_employee(db: Session, pod_id: int, recommendation: Recommendation):\n    new_recommendation = Recommendation(pod_id=pod_id, recommended_user_id=recommendation.recommended_user_id)\n    db.add(new_recommendation)\n    db.commit()\n    db.refresh(new_recommendation)\n    return new_recommendation\n",
          "auth_service.py": "from sqlalchemy.orm import Session\nfrom app.models.auth import User, UserLogin\nfrom fastapi import HTTPException\nfrom passlib.context import CryptContext\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\ndef login_user(db: Session, user_login: UserLogin):\n    user = db.query(User).filter(User.email == user_login.email).first()\n    if not user or not pwd_context.verify(user_login.password, user.password):\n        raise HTTPException(status_code=401, detail='Invalid email or password')\n    token = create_access_token(data={'sub': user.email})\n    return {'token': token, 'user': user}\n\ndef get_current_user(db: Session, token: str):\n    credentials_exception = HTTPException(status_code=401, detail='Could not validate credentials')\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email = payload.get('sub')\n        if email is None:\n            raise credentials_exception\n        user = db.query(User).filter(User.email == email).first()\n        if user is None:\n            raise credentials_exception\n        return user\n    except JWTError:\n        raise credentials_exception\n",
          "__init__.py": ""
        },
        "database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nDATABASE_URL = 'postgresql://user:password@localhost/db'\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
        "main.py": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.api.routes.dashboard import router as dashboard_router\nfrom app.api.routes.lms import router as lms_router\nfrom app.api.routes.pods import router as pods_router\nfrom app.api.routes.auth import router as auth_router\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=['*'],\n    allow_headers=['*'],\n)\n\napp.include_router(dashboard_router, prefix='/api/dashboard', tags=['Dashboard'])\napp.include_router(lms_router, prefix='/api/lms', tags=['LMS'])\napp.include_router(pods_router, prefix='/api/pods', tags=['Pods'])\napp.include_router(auth_router, prefix='/api/auth', tags=['Auth'])\n"
      },
      "tests": {
        "test_dashboard.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_get_dashboard_tiles():\n    response = client.get('/api/dashboard/tiles', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'tiles' in response.json()\n",
        "test_lms.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_apply_leave():\n    response = client.post('/api/lms/leaves/apply', json={\n        'start_date': '2025-03-15',\n        'end_date': '2025-03-18',\n        'reason': 'Family event'\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['message'] == 'Leave request submitted successfully'\n\ndef test_get_leave_status():\n    response = client.get('/api/lms/leaves/status', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'status' in response.json()\n\ndef test_approve_leave():\n    response = client.patch('/api/lms/leaves/1/approve', json={\n        'status': 'approved'\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['status'] == 'approved'\n",
        "test_pods.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_get_pod_details():\n    response = client.get('/api/pods/1/details', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'pod_id' in response.json()\n\ndef test_recommend_employee():\n    response = client.post('/api/pods/1/recommend', json={\n        'recommended_user_id': 3\n    }, headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert response.json()['message'] == 'Recommendation sent successfully'\n",
        "test_auth.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_login():\n    response = client.post('/api/auth/login', json={\n        'email': 'user@example.com',\n        'password': 'securepassword'\n    })\n    assert response.status_code == 200\n    assert 'token' in response.json()\n\ndef test_get_current_user():\n    response = client.get('/api/auth/user', headers={'Authorization': 'Bearer test_token'})\n    assert response.status_code == 200\n    assert 'id' in response.json()\n",
        "__init__.py": ""
      },
      "Dockerfile": "FROM python:3.9-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]",
      "requirements.txt": "fastapi\nuvicorn\nsqlalchemy\npydantic\npasslib\npython-jose\npytest\n",
      ".env": "DATABASE_URL=postgresql://user:password@localhost/db\nSECRET_KEY=your_secret_key\nALGORITHM=HS256\n",
      "README.md": "# Dashboard Application\n\nThis is a centralized interface for employees and managers to access various features, including Leave Management System (LMS) and Pods.\n\n## Features\n- Leave Management System\n- Pods Management\n- Dashboard with real-time insights\n\n## Setup\n1. Install dependencies: `pip install -r requirements.txt`\n2. Run the application: `uvicorn app.main:app --reload`\n3. Access the API at `http://127.0.0.1:8000`\n"
    }
}
```
"""

def clean_and_convert_to_json(input_string):
    try:
        # Remove any unnecessary whitespace or newlines
        cleaned_string = input_string.strip()
        
        # Parse the cleaned string into a JSON object
        json_data = json.loads(cleaned_string)
        
        # Pretty-print the JSON object
        print(json.dumps(json_data, indent=4))
        
        return json_data
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON: {e}")
        return None

# Call the function with the input string
json_object = clean_and_convert_to_json(input_string)